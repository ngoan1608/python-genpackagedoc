# **************************************************************************************************************
# GenPackageDoc configuration file
#
# GenPackageDoc creates tex files out of the docstrings of Python modules and out of separate rst files.
# With the help of a LaTeX compiler the tex files can be converted into a PDF file.
# This json file contains the required settings.
#
# Updated 13.04.2022
#
# **************************************************************************************************************
# Format: json with lines commented out by '#' at the beginning
# All fixed terms (keys) have to be written in capital letters, all user defined keys in small letters.
# Paths to files and folders within this file must be relative (except "TEX"). The reference for relative paths
# is the position of this file.
# --------------------------------------------------------------------------------------------------------------

{

# Section "TOC":
# --------------
# Defines the content of the PDF document (= the order of the chapters).
# A chapter can be represented by an additional text file in rst format. Every rst file is a separate chapter
# within the resulting PDF document.
# In case of Python modules are involved, every Python module is a chapter.
# Class and function definitions within a Python module are subchapters. Methods of classes are subsubchapters.
# In this section every additional rst file is represented by a short name (key) and a path incl. file name (key value).
# This is completely under the responsibility of the user and therefore the names have to be written in small letters only.
# The key "INTERFACE" points to a folder containing Python modules that have to be documented.
# The key "CHAPTERS" contains a list of all defined keys in the order of their desired appearances within the resulting PDF document.
# It is strongly recommended to place all additional rst files flat into one single folder (and not in any further sub folder).
# Reason is that currently the tex files generated out of the rst files are also placed flat into only one single output folder
# (see section "OUTPUT") and the relative paths to possibly imported pictures (see section "PICTURES") must be kept valid!

   "TOC" : {
            "introduction" : "./additional_docs/Introduction.rst",
            "description"  : "./additional_docs/Description.rst",
            "INTERFACE"    : "../additions/PythonExtensionsCollection",
            "appendix"     : "./additional_docs/Appendix.rst",
            "CHAPTERS"     : ["introduction","description","INTERFACE","appendix"]
           },

# Section "PARAMS":
# -----------------
# In this section a user has the ability to define own values, that are accessible within the doctrings of involved Python modules
# and also within separate rst files. Key names have to be written in small letters to indicate that they are user defined.
# Values can be either hard coded or taken over from the repository configuration (see config/repository_config.json).
# In second case the key name has to be encaplulated within three hashes '#'. The same notation can be used in rst files and doctrings
# of Python modules (for example adding an additional hint within a doctring of a class: ###additional_hint###).

   "PARAMS" : {
                 "additional_hint" : "An additional hint is given ###NOW###",
                 "the_name"        : "Karl Otto",
                 "the_url"         : "###URL###"
              },

# Section "DOCUMENT":
# -------------------
# This section contains basic details about the output document. Like in the previous section, values can be defined
# either hard coded or taken over from the repository configuration (with '#' notation).

   "DOCUMENT" : {
                 "OUTPUTFILENAME" : "PythonExtensionsCollection.tex",
                 "AUTHOR"         : "###AUTHOR###",
                 "TITLE"          : "###REPOSITORYNAME###",
                 "DATE"           : "###PACKAGEDATE###",
                 "VERSION"        : "###PACKAGEVERSION###"
                },

# Section "PICTURES":
# -------------------
# Additional rst files may import pictures. GenPackageDoc needs to know where to find them.
# To keep the relative paths to possibly imported pictures valid also within the created tex files,
# this pictures folder will be copied into the output folder defined by key "OUTPUT".

   "PICTURES" : "./additional_docs/pictures",

# Section "OUTPUT":
# -----------------
# Defines the path to the output folder containing the generated tex files and the PDF file.

   "OUTPUT" : "./build",

# Section "TEX":
# -----------------
# Converting the generated text source files to a PDF document requires a LaTeX distribution.
# GenPackageDoc needs to know where to find LaTeX. Because the path to the LaTeX interpreter depends
# on the operating system, this path has to be defined separately for every supported operating system
# (currently "WINDOWS" and "LINUX").
# In opposite to the previous statement these paths have to be absolute (recommended: usage of environment variables).
# Example:

   "TEX" : {
            "WINDOWS" : "%ROBOTLATEXPATH%/miktex/bin/x64/pdflatex.exe",
            "LINUX"   : "${ROBOTLATEXPATH}/miktex/bin/x64/pdflatex"
           }
}
